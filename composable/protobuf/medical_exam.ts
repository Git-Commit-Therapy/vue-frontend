// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.1
// source: medical_exam.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "./google/protobuf/timestamp";
import { MedicalEvent } from "./medical_event";
import { Doctor, Patient } from "./user";

export const protobufPackage = "com.git_commit_therapy.proto";

export interface MedicalExam {
  examId: number;
  dateTime: Date | undefined;
  medicalReport: string;
  examType: string;
  doctor: Doctor | undefined;
  patient: Patient | undefined;
  medicalEvent: MedicalEvent | undefined;
}

function createBaseMedicalExam(): MedicalExam {
  return {
    examId: 0,
    dateTime: undefined,
    medicalReport: "",
    examType: "",
    doctor: undefined,
    patient: undefined,
    medicalEvent: undefined,
  };
}

export const MedicalExam: MessageFns<MedicalExam> = {
  encode(
    message: MedicalExam,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.examId !== 0) {
      writer.uint32(8).int32(message.examId);
    }
    if (message.dateTime !== undefined) {
      Timestamp.encode(
        toTimestamp(message.dateTime),
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.medicalReport !== "") {
      writer.uint32(26).string(message.medicalReport);
    }
    if (message.examType !== "") {
      writer.uint32(34).string(message.examType);
    }
    if (message.doctor !== undefined) {
      Doctor.encode(message.doctor, writer.uint32(42).fork()).join();
    }
    if (message.patient !== undefined) {
      Patient.encode(message.patient, writer.uint32(50).fork()).join();
    }
    if (message.medicalEvent !== undefined) {
      MedicalEvent.encode(
        message.medicalEvent,
        writer.uint32(58).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MedicalExam {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMedicalExam();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.examId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.dateTime = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.medicalReport = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.examType = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.doctor = Doctor.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.patient = Patient.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.medicalEvent = MedicalEvent.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<MedicalExam>): MedicalExam {
    return MedicalExam.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MedicalExam>): MedicalExam {
    const message = createBaseMedicalExam();
    message.examId = object.examId ?? 0;
    message.dateTime = object.dateTime ?? undefined;
    message.medicalReport = object.medicalReport ?? "";
    message.examType = object.examType ?? "";
    message.doctor =
      object.doctor !== undefined && object.doctor !== null
        ? Doctor.fromPartial(object.doctor)
        : undefined;
    message.patient =
      object.patient !== undefined && object.patient !== null
        ? Patient.fromPartial(object.patient)
        : undefined;
    message.medicalEvent =
      object.medicalEvent !== undefined && object.medicalEvent !== null
        ? MedicalEvent.fromPartial(object.medicalEvent)
        : undefined;
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
