// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.1
// source: medical_info.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Patient } from "./user";

export const protobufPackage = "com.git_commit_therapy.proto";

export interface MedicalInfo {
  medicalInfoId: number;
  patient: Patient | undefined;
  description: string;
}

function createBaseMedicalInfo(): MedicalInfo {
  return { medicalInfoId: 0, patient: undefined, description: "" };
}

export const MedicalInfo: MessageFns<MedicalInfo> = {
  encode(
    message: MedicalInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.medicalInfoId !== 0) {
      writer.uint32(8).int32(message.medicalInfoId);
    }
    if (message.patient !== undefined) {
      Patient.encode(message.patient, writer.uint32(18).fork()).join();
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MedicalInfo {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMedicalInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.medicalInfoId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.patient = Patient.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<MedicalInfo>): MedicalInfo {
    return MedicalInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MedicalInfo>): MedicalInfo {
    const message = createBaseMedicalInfo();
    message.medicalInfoId = object.medicalInfoId ?? 0;
    message.patient =
      object.patient !== undefined && object.patient !== null
        ? Patient.fromPartial(object.patient)
        : undefined;
    message.description = object.description ?? "";
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
