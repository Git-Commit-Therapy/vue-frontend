// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.1
// source: employee_services.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Appointment } from "./appointment";
import { Empty } from "./google/protobuf/empty";
import { Timestamp } from "./google/protobuf/timestamp";
import { MedicalEvent } from "./medical_event";
import { MedicalExam } from "./medical_exam";
import { MedicalInfo } from "./medical_info";
import { Doctor, Patient, Staff } from "./user";
import { Ward } from "./ward";

export const protobufPackage = "com.git_commit_therapy.proto";

export interface GetAllDoctorsResponse {
  doctors: Doctor[];
}

export interface GetAllStaffsResponse {
  staffs: Staff[];
}

export interface GetAllPatientsResponse {
  patients: Patient[];
}

export interface GetAppointmentsRequest {
  fromDate: Date | undefined;
  toDate: Date | undefined;
}

export interface GetAppointmentsFromDoctorRequest {
  doctor: Doctor | undefined;
  fromDate: Date | undefined;
  toDate: Date | undefined;
}

export interface GetAppointmentsResponse {
  appointments: Appointment[];
}

export interface ModifyAppointmentResponse {
  success: boolean;
  message: string;
}

export interface CreateAppointmentResponse {
  success: boolean;
  message: string;
}

export interface GetAppointmentDetailsResponse {
  appointment: Appointment | undefined;
}

export interface GetAppointmentsFromDoctorResponse {
  appointments: Appointment[];
}

export interface GetAllMedicalExamRequest {
  fromDate: Date | undefined;
  toDate: Date | undefined;
}

export interface GetAllMedicalExamResponse {
  medicalExams: MedicalExam[];
}

export interface GetAllMedicalEventRequest {
  fromDate: Date | undefined;
  toDate: Date | undefined;
}

export interface GetAllMedicalEventResponse {
  medicalEvent: MedicalEvent[];
}

export interface GetMedicalExamDetailsResponse {
  exam: MedicalExam | undefined;
}

export interface GetMedicalEventDetailsResponse {
  event: MedicalEvent | undefined;
}

export interface GetAllWardResponse {
  ward: Ward[];
}

export interface CreateMedicalExamResponse {
  success: boolean;
  message: string;
}

export interface CreateMedicalEventResponse {
  success: boolean;
  message: string;
}

export interface CreateMedicalInfoResponse {
  success: boolean;
  message: string;
}

export interface CreatePatientResponse {
  success: boolean;
  message: string;
}

export interface CreateDoctorResponse {
  success: boolean;
  message: string;
}

export interface CreateStaffResponse {
  success: boolean;
  message: string;
}

export interface CreateWardResponse {
  success: boolean;
  message: string;
}

export interface ModifyPatientResponse {
  success: boolean;
  message: string;
}

export interface ModifyDoctorResponse {
  success: boolean;
  message: string;
}

export interface ModifyStaffResponse {
  success: boolean;
  message: string;
}

export interface ModifyMedicalEventResponse {
  success: boolean;
  message: string;
}

export interface ModifyMedicalExamResponse {
  success: boolean;
  message: string;
}

export interface ModifyMedicalInfoResponse {
  success: boolean;
  message: string;
}

function createBaseGetAllDoctorsResponse(): GetAllDoctorsResponse {
  return { doctors: [] };
}

export const GetAllDoctorsResponse: MessageFns<GetAllDoctorsResponse> = {
  encode(
    message: GetAllDoctorsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.doctors) {
      Doctor.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetAllDoctorsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllDoctorsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.doctors.push(Doctor.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetAllDoctorsResponse>): GetAllDoctorsResponse {
    return GetAllDoctorsResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetAllDoctorsResponse>,
  ): GetAllDoctorsResponse {
    const message = createBaseGetAllDoctorsResponse();
    message.doctors = object.doctors?.map((e) => Doctor.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetAllStaffsResponse(): GetAllStaffsResponse {
  return { staffs: [] };
}

export const GetAllStaffsResponse: MessageFns<GetAllStaffsResponse> = {
  encode(
    message: GetAllStaffsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.staffs) {
      Staff.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetAllStaffsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllStaffsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.staffs.push(Staff.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetAllStaffsResponse>): GetAllStaffsResponse {
    return GetAllStaffsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAllStaffsResponse>): GetAllStaffsResponse {
    const message = createBaseGetAllStaffsResponse();
    message.staffs = object.staffs?.map((e) => Staff.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetAllPatientsResponse(): GetAllPatientsResponse {
  return { patients: [] };
}

export const GetAllPatientsResponse: MessageFns<GetAllPatientsResponse> = {
  encode(
    message: GetAllPatientsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.patients) {
      Patient.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetAllPatientsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllPatientsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.patients.push(Patient.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetAllPatientsResponse>): GetAllPatientsResponse {
    return GetAllPatientsResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetAllPatientsResponse>,
  ): GetAllPatientsResponse {
    const message = createBaseGetAllPatientsResponse();
    message.patients =
      object.patients?.map((e) => Patient.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetAppointmentsRequest(): GetAppointmentsRequest {
  return { fromDate: undefined, toDate: undefined };
}

export const GetAppointmentsRequest: MessageFns<GetAppointmentsRequest> = {
  encode(
    message: GetAppointmentsRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.fromDate !== undefined) {
      Timestamp.encode(
        toTimestamp(message.fromDate),
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.toDate !== undefined) {
      Timestamp.encode(
        toTimestamp(message.toDate),
        writer.uint32(18).fork(),
      ).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetAppointmentsRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAppointmentsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fromDate = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.toDate = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetAppointmentsRequest>): GetAppointmentsRequest {
    return GetAppointmentsRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetAppointmentsRequest>,
  ): GetAppointmentsRequest {
    const message = createBaseGetAppointmentsRequest();
    message.fromDate = object.fromDate ?? undefined;
    message.toDate = object.toDate ?? undefined;
    return message;
  },
};

function createBaseGetAppointmentsFromDoctorRequest(): GetAppointmentsFromDoctorRequest {
  return { doctor: undefined, fromDate: undefined, toDate: undefined };
}

export const GetAppointmentsFromDoctorRequest: MessageFns<GetAppointmentsFromDoctorRequest> =
  {
    encode(
      message: GetAppointmentsFromDoctorRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.doctor !== undefined) {
        Doctor.encode(message.doctor, writer.uint32(10).fork()).join();
      }
      if (message.fromDate !== undefined) {
        Timestamp.encode(
          toTimestamp(message.fromDate),
          writer.uint32(18).fork(),
        ).join();
      }
      if (message.toDate !== undefined) {
        Timestamp.encode(
          toTimestamp(message.toDate),
          writer.uint32(26).fork(),
        ).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): GetAppointmentsFromDoctorRequest {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseGetAppointmentsFromDoctorRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.doctor = Doctor.decode(reader, reader.uint32());
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.fromDate = fromTimestamp(
              Timestamp.decode(reader, reader.uint32()),
            );
            continue;
          }
          case 3: {
            if (tag !== 26) {
              break;
            }

            message.toDate = fromTimestamp(
              Timestamp.decode(reader, reader.uint32()),
            );
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    create(
      base?: DeepPartial<GetAppointmentsFromDoctorRequest>,
    ): GetAppointmentsFromDoctorRequest {
      return GetAppointmentsFromDoctorRequest.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<GetAppointmentsFromDoctorRequest>,
    ): GetAppointmentsFromDoctorRequest {
      const message = createBaseGetAppointmentsFromDoctorRequest();
      message.doctor =
        object.doctor !== undefined && object.doctor !== null
          ? Doctor.fromPartial(object.doctor)
          : undefined;
      message.fromDate = object.fromDate ?? undefined;
      message.toDate = object.toDate ?? undefined;
      return message;
    },
  };

function createBaseGetAppointmentsResponse(): GetAppointmentsResponse {
  return { appointments: [] };
}

export const GetAppointmentsResponse: MessageFns<GetAppointmentsResponse> = {
  encode(
    message: GetAppointmentsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.appointments) {
      Appointment.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetAppointmentsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAppointmentsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.appointments.push(
            Appointment.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetAppointmentsResponse>): GetAppointmentsResponse {
    return GetAppointmentsResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetAppointmentsResponse>,
  ): GetAppointmentsResponse {
    const message = createBaseGetAppointmentsResponse();
    message.appointments =
      object.appointments?.map((e) => Appointment.fromPartial(e)) || [];
    return message;
  },
};

function createBaseModifyAppointmentResponse(): ModifyAppointmentResponse {
  return { success: false, message: "" };
}

export const ModifyAppointmentResponse: MessageFns<ModifyAppointmentResponse> =
  {
    encode(
      message: ModifyAppointmentResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.success !== false) {
        writer.uint32(8).bool(message.success);
      }
      if (message.message !== "") {
        writer.uint32(18).string(message.message);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): ModifyAppointmentResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseModifyAppointmentResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 8) {
              break;
            }

            message.success = reader.bool();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.message = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    create(
      base?: DeepPartial<ModifyAppointmentResponse>,
    ): ModifyAppointmentResponse {
      return ModifyAppointmentResponse.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<ModifyAppointmentResponse>,
    ): ModifyAppointmentResponse {
      const message = createBaseModifyAppointmentResponse();
      message.success = object.success ?? false;
      message.message = object.message ?? "";
      return message;
    },
  };

function createBaseCreateAppointmentResponse(): CreateAppointmentResponse {
  return { success: false, message: "" };
}

export const CreateAppointmentResponse: MessageFns<CreateAppointmentResponse> =
  {
    encode(
      message: CreateAppointmentResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.success !== false) {
        writer.uint32(8).bool(message.success);
      }
      if (message.message !== "") {
        writer.uint32(18).string(message.message);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): CreateAppointmentResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseCreateAppointmentResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 8) {
              break;
            }

            message.success = reader.bool();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.message = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    create(
      base?: DeepPartial<CreateAppointmentResponse>,
    ): CreateAppointmentResponse {
      return CreateAppointmentResponse.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<CreateAppointmentResponse>,
    ): CreateAppointmentResponse {
      const message = createBaseCreateAppointmentResponse();
      message.success = object.success ?? false;
      message.message = object.message ?? "";
      return message;
    },
  };

function createBaseGetAppointmentDetailsResponse(): GetAppointmentDetailsResponse {
  return { appointment: undefined };
}

export const GetAppointmentDetailsResponse: MessageFns<GetAppointmentDetailsResponse> =
  {
    encode(
      message: GetAppointmentDetailsResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.appointment !== undefined) {
        Appointment.encode(
          message.appointment,
          writer.uint32(10).fork(),
        ).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): GetAppointmentDetailsResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseGetAppointmentDetailsResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.appointment = Appointment.decode(reader, reader.uint32());
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    create(
      base?: DeepPartial<GetAppointmentDetailsResponse>,
    ): GetAppointmentDetailsResponse {
      return GetAppointmentDetailsResponse.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<GetAppointmentDetailsResponse>,
    ): GetAppointmentDetailsResponse {
      const message = createBaseGetAppointmentDetailsResponse();
      message.appointment =
        object.appointment !== undefined && object.appointment !== null
          ? Appointment.fromPartial(object.appointment)
          : undefined;
      return message;
    },
  };

function createBaseGetAppointmentsFromDoctorResponse(): GetAppointmentsFromDoctorResponse {
  return { appointments: [] };
}

export const GetAppointmentsFromDoctorResponse: MessageFns<GetAppointmentsFromDoctorResponse> =
  {
    encode(
      message: GetAppointmentsFromDoctorResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      for (const v of message.appointments) {
        Appointment.encode(v!, writer.uint32(10).fork()).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): GetAppointmentsFromDoctorResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseGetAppointmentsFromDoctorResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.appointments.push(
              Appointment.decode(reader, reader.uint32()),
            );
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    create(
      base?: DeepPartial<GetAppointmentsFromDoctorResponse>,
    ): GetAppointmentsFromDoctorResponse {
      return GetAppointmentsFromDoctorResponse.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<GetAppointmentsFromDoctorResponse>,
    ): GetAppointmentsFromDoctorResponse {
      const message = createBaseGetAppointmentsFromDoctorResponse();
      message.appointments =
        object.appointments?.map((e) => Appointment.fromPartial(e)) || [];
      return message;
    },
  };

function createBaseGetAllMedicalExamRequest(): GetAllMedicalExamRequest {
  return { fromDate: undefined, toDate: undefined };
}

export const GetAllMedicalExamRequest: MessageFns<GetAllMedicalExamRequest> = {
  encode(
    message: GetAllMedicalExamRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.fromDate !== undefined) {
      Timestamp.encode(
        toTimestamp(message.fromDate),
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.toDate !== undefined) {
      Timestamp.encode(
        toTimestamp(message.toDate),
        writer.uint32(18).fork(),
      ).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetAllMedicalExamRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllMedicalExamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fromDate = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.toDate = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(
    base?: DeepPartial<GetAllMedicalExamRequest>,
  ): GetAllMedicalExamRequest {
    return GetAllMedicalExamRequest.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<GetAllMedicalExamRequest>,
  ): GetAllMedicalExamRequest {
    const message = createBaseGetAllMedicalExamRequest();
    message.fromDate = object.fromDate ?? undefined;
    message.toDate = object.toDate ?? undefined;
    return message;
  },
};

function createBaseGetAllMedicalExamResponse(): GetAllMedicalExamResponse {
  return { medicalExams: [] };
}

export const GetAllMedicalExamResponse: MessageFns<GetAllMedicalExamResponse> =
  {
    encode(
      message: GetAllMedicalExamResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      for (const v of message.medicalExams) {
        MedicalExam.encode(v!, writer.uint32(10).fork()).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): GetAllMedicalExamResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseGetAllMedicalExamResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.medicalExams.push(
              MedicalExam.decode(reader, reader.uint32()),
            );
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    create(
      base?: DeepPartial<GetAllMedicalExamResponse>,
    ): GetAllMedicalExamResponse {
      return GetAllMedicalExamResponse.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<GetAllMedicalExamResponse>,
    ): GetAllMedicalExamResponse {
      const message = createBaseGetAllMedicalExamResponse();
      message.medicalExams =
        object.medicalExams?.map((e) => MedicalExam.fromPartial(e)) || [];
      return message;
    },
  };

function createBaseGetAllMedicalEventRequest(): GetAllMedicalEventRequest {
  return { fromDate: undefined, toDate: undefined };
}

export const GetAllMedicalEventRequest: MessageFns<GetAllMedicalEventRequest> =
  {
    encode(
      message: GetAllMedicalEventRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.fromDate !== undefined) {
        Timestamp.encode(
          toTimestamp(message.fromDate),
          writer.uint32(10).fork(),
        ).join();
      }
      if (message.toDate !== undefined) {
        Timestamp.encode(
          toTimestamp(message.toDate),
          writer.uint32(18).fork(),
        ).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): GetAllMedicalEventRequest {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseGetAllMedicalEventRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.fromDate = fromTimestamp(
              Timestamp.decode(reader, reader.uint32()),
            );
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.toDate = fromTimestamp(
              Timestamp.decode(reader, reader.uint32()),
            );
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    create(
      base?: DeepPartial<GetAllMedicalEventRequest>,
    ): GetAllMedicalEventRequest {
      return GetAllMedicalEventRequest.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<GetAllMedicalEventRequest>,
    ): GetAllMedicalEventRequest {
      const message = createBaseGetAllMedicalEventRequest();
      message.fromDate = object.fromDate ?? undefined;
      message.toDate = object.toDate ?? undefined;
      return message;
    },
  };

function createBaseGetAllMedicalEventResponse(): GetAllMedicalEventResponse {
  return { medicalEvent: [] };
}

export const GetAllMedicalEventResponse: MessageFns<GetAllMedicalEventResponse> =
  {
    encode(
      message: GetAllMedicalEventResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      for (const v of message.medicalEvent) {
        MedicalEvent.encode(v!, writer.uint32(10).fork()).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): GetAllMedicalEventResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseGetAllMedicalEventResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.medicalEvent.push(
              MedicalEvent.decode(reader, reader.uint32()),
            );
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    create(
      base?: DeepPartial<GetAllMedicalEventResponse>,
    ): GetAllMedicalEventResponse {
      return GetAllMedicalEventResponse.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<GetAllMedicalEventResponse>,
    ): GetAllMedicalEventResponse {
      const message = createBaseGetAllMedicalEventResponse();
      message.medicalEvent =
        object.medicalEvent?.map((e) => MedicalEvent.fromPartial(e)) || [];
      return message;
    },
  };

function createBaseGetMedicalExamDetailsResponse(): GetMedicalExamDetailsResponse {
  return { exam: undefined };
}

export const GetMedicalExamDetailsResponse: MessageFns<GetMedicalExamDetailsResponse> =
  {
    encode(
      message: GetMedicalExamDetailsResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.exam !== undefined) {
        MedicalExam.encode(message.exam, writer.uint32(10).fork()).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): GetMedicalExamDetailsResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseGetMedicalExamDetailsResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.exam = MedicalExam.decode(reader, reader.uint32());
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    create(
      base?: DeepPartial<GetMedicalExamDetailsResponse>,
    ): GetMedicalExamDetailsResponse {
      return GetMedicalExamDetailsResponse.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<GetMedicalExamDetailsResponse>,
    ): GetMedicalExamDetailsResponse {
      const message = createBaseGetMedicalExamDetailsResponse();
      message.exam =
        object.exam !== undefined && object.exam !== null
          ? MedicalExam.fromPartial(object.exam)
          : undefined;
      return message;
    },
  };

function createBaseGetMedicalEventDetailsResponse(): GetMedicalEventDetailsResponse {
  return { event: undefined };
}

export const GetMedicalEventDetailsResponse: MessageFns<GetMedicalEventDetailsResponse> =
  {
    encode(
      message: GetMedicalEventDetailsResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.event !== undefined) {
        MedicalEvent.encode(message.event, writer.uint32(10).fork()).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): GetMedicalEventDetailsResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseGetMedicalEventDetailsResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 10) {
              break;
            }

            message.event = MedicalEvent.decode(reader, reader.uint32());
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    create(
      base?: DeepPartial<GetMedicalEventDetailsResponse>,
    ): GetMedicalEventDetailsResponse {
      return GetMedicalEventDetailsResponse.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<GetMedicalEventDetailsResponse>,
    ): GetMedicalEventDetailsResponse {
      const message = createBaseGetMedicalEventDetailsResponse();
      message.event =
        object.event !== undefined && object.event !== null
          ? MedicalEvent.fromPartial(object.event)
          : undefined;
      return message;
    },
  };

function createBaseGetAllWardResponse(): GetAllWardResponse {
  return { ward: [] };
}

export const GetAllWardResponse: MessageFns<GetAllWardResponse> = {
  encode(
    message: GetAllWardResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.ward) {
      Ward.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): GetAllWardResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetAllWardResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.ward.push(Ward.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetAllWardResponse>): GetAllWardResponse {
    return GetAllWardResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetAllWardResponse>): GetAllWardResponse {
    const message = createBaseGetAllWardResponse();
    message.ward = object.ward?.map((e) => Ward.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateMedicalExamResponse(): CreateMedicalExamResponse {
  return { success: false, message: "" };
}

export const CreateMedicalExamResponse: MessageFns<CreateMedicalExamResponse> =
  {
    encode(
      message: CreateMedicalExamResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.success !== false) {
        writer.uint32(8).bool(message.success);
      }
      if (message.message !== "") {
        writer.uint32(18).string(message.message);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): CreateMedicalExamResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseCreateMedicalExamResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 8) {
              break;
            }

            message.success = reader.bool();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.message = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    create(
      base?: DeepPartial<CreateMedicalExamResponse>,
    ): CreateMedicalExamResponse {
      return CreateMedicalExamResponse.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<CreateMedicalExamResponse>,
    ): CreateMedicalExamResponse {
      const message = createBaseCreateMedicalExamResponse();
      message.success = object.success ?? false;
      message.message = object.message ?? "";
      return message;
    },
  };

function createBaseCreateMedicalEventResponse(): CreateMedicalEventResponse {
  return { success: false, message: "" };
}

export const CreateMedicalEventResponse: MessageFns<CreateMedicalEventResponse> =
  {
    encode(
      message: CreateMedicalEventResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.success !== false) {
        writer.uint32(8).bool(message.success);
      }
      if (message.message !== "") {
        writer.uint32(18).string(message.message);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): CreateMedicalEventResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseCreateMedicalEventResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 8) {
              break;
            }

            message.success = reader.bool();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.message = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    create(
      base?: DeepPartial<CreateMedicalEventResponse>,
    ): CreateMedicalEventResponse {
      return CreateMedicalEventResponse.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<CreateMedicalEventResponse>,
    ): CreateMedicalEventResponse {
      const message = createBaseCreateMedicalEventResponse();
      message.success = object.success ?? false;
      message.message = object.message ?? "";
      return message;
    },
  };

function createBaseCreateMedicalInfoResponse(): CreateMedicalInfoResponse {
  return { success: false, message: "" };
}

export const CreateMedicalInfoResponse: MessageFns<CreateMedicalInfoResponse> =
  {
    encode(
      message: CreateMedicalInfoResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.success !== false) {
        writer.uint32(8).bool(message.success);
      }
      if (message.message !== "") {
        writer.uint32(18).string(message.message);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): CreateMedicalInfoResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseCreateMedicalInfoResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 8) {
              break;
            }

            message.success = reader.bool();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.message = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    create(
      base?: DeepPartial<CreateMedicalInfoResponse>,
    ): CreateMedicalInfoResponse {
      return CreateMedicalInfoResponse.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<CreateMedicalInfoResponse>,
    ): CreateMedicalInfoResponse {
      const message = createBaseCreateMedicalInfoResponse();
      message.success = object.success ?? false;
      message.message = object.message ?? "";
      return message;
    },
  };

function createBaseCreatePatientResponse(): CreatePatientResponse {
  return { success: false, message: "" };
}

export const CreatePatientResponse: MessageFns<CreatePatientResponse> = {
  encode(
    message: CreatePatientResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreatePatientResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreatePatientResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CreatePatientResponse>): CreatePatientResponse {
    return CreatePatientResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<CreatePatientResponse>,
  ): CreatePatientResponse {
    const message = createBaseCreatePatientResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseCreateDoctorResponse(): CreateDoctorResponse {
  return { success: false, message: "" };
}

export const CreateDoctorResponse: MessageFns<CreateDoctorResponse> = {
  encode(
    message: CreateDoctorResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreateDoctorResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateDoctorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CreateDoctorResponse>): CreateDoctorResponse {
    return CreateDoctorResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateDoctorResponse>): CreateDoctorResponse {
    const message = createBaseCreateDoctorResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseCreateStaffResponse(): CreateStaffResponse {
  return { success: false, message: "" };
}

export const CreateStaffResponse: MessageFns<CreateStaffResponse> = {
  encode(
    message: CreateStaffResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreateStaffResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateStaffResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CreateStaffResponse>): CreateStaffResponse {
    return CreateStaffResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateStaffResponse>): CreateStaffResponse {
    const message = createBaseCreateStaffResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseCreateWardResponse(): CreateWardResponse {
  return { success: false, message: "" };
}

export const CreateWardResponse: MessageFns<CreateWardResponse> = {
  encode(
    message: CreateWardResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): CreateWardResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateWardResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CreateWardResponse>): CreateWardResponse {
    return CreateWardResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateWardResponse>): CreateWardResponse {
    const message = createBaseCreateWardResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseModifyPatientResponse(): ModifyPatientResponse {
  return { success: false, message: "" };
}

export const ModifyPatientResponse: MessageFns<ModifyPatientResponse> = {
  encode(
    message: ModifyPatientResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ModifyPatientResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModifyPatientResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ModifyPatientResponse>): ModifyPatientResponse {
    return ModifyPatientResponse.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<ModifyPatientResponse>,
  ): ModifyPatientResponse {
    const message = createBaseModifyPatientResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseModifyDoctorResponse(): ModifyDoctorResponse {
  return { success: false, message: "" };
}

export const ModifyDoctorResponse: MessageFns<ModifyDoctorResponse> = {
  encode(
    message: ModifyDoctorResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ModifyDoctorResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModifyDoctorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ModifyDoctorResponse>): ModifyDoctorResponse {
    return ModifyDoctorResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ModifyDoctorResponse>): ModifyDoctorResponse {
    const message = createBaseModifyDoctorResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseModifyStaffResponse(): ModifyStaffResponse {
  return { success: false, message: "" };
}

export const ModifyStaffResponse: MessageFns<ModifyStaffResponse> = {
  encode(
    message: ModifyStaffResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ModifyStaffResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseModifyStaffResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ModifyStaffResponse>): ModifyStaffResponse {
    return ModifyStaffResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ModifyStaffResponse>): ModifyStaffResponse {
    const message = createBaseModifyStaffResponse();
    message.success = object.success ?? false;
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseModifyMedicalEventResponse(): ModifyMedicalEventResponse {
  return { success: false, message: "" };
}

export const ModifyMedicalEventResponse: MessageFns<ModifyMedicalEventResponse> =
  {
    encode(
      message: ModifyMedicalEventResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.success !== false) {
        writer.uint32(8).bool(message.success);
      }
      if (message.message !== "") {
        writer.uint32(18).string(message.message);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): ModifyMedicalEventResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseModifyMedicalEventResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 8) {
              break;
            }

            message.success = reader.bool();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.message = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    create(
      base?: DeepPartial<ModifyMedicalEventResponse>,
    ): ModifyMedicalEventResponse {
      return ModifyMedicalEventResponse.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<ModifyMedicalEventResponse>,
    ): ModifyMedicalEventResponse {
      const message = createBaseModifyMedicalEventResponse();
      message.success = object.success ?? false;
      message.message = object.message ?? "";
      return message;
    },
  };

function createBaseModifyMedicalExamResponse(): ModifyMedicalExamResponse {
  return { success: false, message: "" };
}

export const ModifyMedicalExamResponse: MessageFns<ModifyMedicalExamResponse> =
  {
    encode(
      message: ModifyMedicalExamResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.success !== false) {
        writer.uint32(8).bool(message.success);
      }
      if (message.message !== "") {
        writer.uint32(18).string(message.message);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): ModifyMedicalExamResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseModifyMedicalExamResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 8) {
              break;
            }

            message.success = reader.bool();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.message = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    create(
      base?: DeepPartial<ModifyMedicalExamResponse>,
    ): ModifyMedicalExamResponse {
      return ModifyMedicalExamResponse.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<ModifyMedicalExamResponse>,
    ): ModifyMedicalExamResponse {
      const message = createBaseModifyMedicalExamResponse();
      message.success = object.success ?? false;
      message.message = object.message ?? "";
      return message;
    },
  };

function createBaseModifyMedicalInfoResponse(): ModifyMedicalInfoResponse {
  return { success: false, message: "" };
}

export const ModifyMedicalInfoResponse: MessageFns<ModifyMedicalInfoResponse> =
  {
    encode(
      message: ModifyMedicalInfoResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.success !== false) {
        writer.uint32(8).bool(message.success);
      }
      if (message.message !== "") {
        writer.uint32(18).string(message.message);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): ModifyMedicalInfoResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseModifyMedicalInfoResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1: {
            if (tag !== 8) {
              break;
            }

            message.success = reader.bool();
            continue;
          }
          case 2: {
            if (tag !== 18) {
              break;
            }

            message.message = reader.string();
            continue;
          }
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    create(
      base?: DeepPartial<ModifyMedicalInfoResponse>,
    ): ModifyMedicalInfoResponse {
      return ModifyMedicalInfoResponse.fromPartial(base ?? {});
    },
    fromPartial(
      object: DeepPartial<ModifyMedicalInfoResponse>,
    ): ModifyMedicalInfoResponse {
      const message = createBaseModifyMedicalInfoResponse();
      message.success = object.success ?? false;
      message.message = object.message ?? "";
      return message;
    },
  };

export type EmployeeServicesDefinition = typeof EmployeeServicesDefinition;
export const EmployeeServicesDefinition = {
  name: "EmployeeServices",
  fullName: "com.git_commit_therapy.proto.EmployeeServices",
  methods: {
    /** Get Doctor data */
    getDoctor: {
      name: "GetDoctor",
      requestType: Empty,
      requestStream: false,
      responseType: Doctor,
      responseStream: false,
      options: {},
    },
    /** Get all Doctors */
    getAllDoctors: {
      name: "GetAllDoctors",
      requestType: Empty,
      requestStream: false,
      responseType: GetAllDoctorsResponse,
      responseStream: false,
      options: {},
    },
    /** Get Staff data */
    getStaff: {
      name: "GetStaff",
      requestType: Empty,
      requestStream: false,
      responseType: Staff,
      responseStream: false,
      options: {},
    },
    /** Get all Staff */
    getAllStaffs: {
      name: "GetAllStaffs",
      requestType: Empty,
      requestStream: false,
      responseType: GetAllStaffsResponse,
      responseStream: false,
      options: {},
    },
    /** Get Patient data */
    getPatient: {
      name: "GetPatient",
      requestType: Empty,
      requestStream: false,
      responseType: Patient,
      responseStream: false,
      options: {},
    },
    /** Get all Patient */
    getAllPatients: {
      name: "GetAllPatients",
      requestType: Empty,
      requestStream: false,
      responseType: GetAllPatientsResponse,
      responseStream: false,
      options: {},
    },
    /** Get a list of appointments */
    getAppointments: {
      name: "GetAppointments",
      requestType: GetAppointmentsRequest,
      requestStream: false,
      responseType: GetAppointmentsResponse,
      responseStream: false,
      options: {},
    },
    /** Get a list of appointments */
    getAppointmentsFromDoctor: {
      name: "GetAppointmentsFromDoctor",
      requestType: GetAppointmentsFromDoctorRequest,
      requestStream: false,
      responseType: GetAppointmentsFromDoctorResponse,
      responseStream: false,
      options: {},
    },
    /** Get details for a specific appointment */
    getAppointmentDetails: {
      name: "GetAppointmentDetails",
      requestType: Appointment,
      requestStream: false,
      responseType: GetAppointmentDetailsResponse,
      responseStream: false,
      options: {},
    },
    /** Retrieve the list of all medical exams without the medical report */
    getAllMedicalExam: {
      name: "GetAllMedicalExam",
      requestType: GetAllMedicalExamRequest,
      requestStream: false,
      responseType: GetAllMedicalExamResponse,
      responseStream: false,
      options: {},
    },
    /** Get details for a specific medical exam */
    getMedicalExamDetails: {
      name: "GetMedicalExamDetails",
      requestType: MedicalExam,
      requestStream: false,
      responseType: GetMedicalExamDetailsResponse,
      responseStream: false,
      options: {},
    },
    /** Retrieve the list of all medical exams without the medical report */
    getAllMedicalEvent: {
      name: "GetAllMedicalEvent",
      requestType: GetAllMedicalEventRequest,
      requestStream: false,
      responseType: GetAllMedicalEventResponse,
      responseStream: false,
      options: {},
    },
    /** Get details for a specific medical exam */
    getMedicalEventDetails: {
      name: "GetMedicalEventDetails",
      requestType: MedicalEvent,
      requestStream: false,
      responseType: GetMedicalEventDetailsResponse,
      responseStream: false,
      options: {},
    },
    /** Get all ward */
    getAllWard: {
      name: "GetAllWard",
      requestType: Empty,
      requestStream: false,
      responseType: GetAllWardResponse,
      responseStream: false,
      options: {},
    },
    /** Create a medical exam */
    createMedicalExam: {
      name: "CreateMedicalExam",
      requestType: MedicalExam,
      requestStream: false,
      responseType: CreateMedicalExamResponse,
      responseStream: false,
      options: {},
    },
    /** Create a medical event */
    createMedicalEvent: {
      name: "CreateMedicalEvent",
      requestType: MedicalEvent,
      requestStream: false,
      responseType: CreateMedicalEventResponse,
      responseStream: false,
      options: {},
    },
    /** Create a medical info */
    createMedicalInfo: {
      name: "CreateMedicalInfo",
      requestType: MedicalInfo,
      requestStream: false,
      responseType: CreateMedicalInfoResponse,
      responseStream: false,
      options: {},
    },
    /** Create an appointment */
    createAppointment: {
      name: "CreateAppointment",
      requestType: Appointment,
      requestStream: false,
      responseType: CreateAppointmentResponse,
      responseStream: false,
      options: {},
    },
    /** Create a patient */
    createPatient: {
      name: "CreatePatient",
      requestType: Patient,
      requestStream: false,
      responseType: CreatePatientResponse,
      responseStream: false,
      options: {},
    },
    /** Create a patient */
    createDoctor: {
      name: "CreateDoctor",
      requestType: Doctor,
      requestStream: false,
      responseType: CreateDoctorResponse,
      responseStream: false,
      options: {},
    },
    /** Create a staff */
    createStaff: {
      name: "CreateStaff",
      requestType: Staff,
      requestStream: false,
      responseType: CreateStaffResponse,
      responseStream: false,
      options: {},
    },
    /** Create a patient */
    createWard: {
      name: "CreateWard",
      requestType: Ward,
      requestStream: false,
      responseType: CreateWardResponse,
      responseStream: false,
      options: {},
    },
    /** Modify a specific appointment */
    modifyAppointment: {
      name: "ModifyAppointment",
      requestType: Appointment,
      requestStream: false,
      responseType: ModifyAppointmentResponse,
      responseStream: false,
      options: {},
    },
    /** Modify a patient */
    modifyPatient: {
      name: "ModifyPatient",
      requestType: Patient,
      requestStream: false,
      responseType: ModifyPatientResponse,
      responseStream: false,
      options: {},
    },
    /** Modify a doctor */
    modifyDoctor: {
      name: "ModifyDoctor",
      requestType: Doctor,
      requestStream: false,
      responseType: ModifyDoctorResponse,
      responseStream: false,
      options: {},
    },
    /** Modify a staff */
    modifyStaff: {
      name: "ModifyStaff",
      requestType: Staff,
      requestStream: false,
      responseType: ModifyStaffResponse,
      responseStream: false,
      options: {},
    },
    /** Modify a medical event */
    modifyMedicalEvent: {
      name: "ModifyMedicalEvent",
      requestType: MedicalEvent,
      requestStream: false,
      responseType: ModifyMedicalEventResponse,
      responseStream: false,
      options: {},
    },
    /** Modify medical exam */
    modifyMedicalExam: {
      name: "ModifyMedicalExam",
      requestType: MedicalExam,
      requestStream: false,
      responseType: ModifyMedicalExamResponse,
      responseStream: false,
      options: {},
    },
    /** Modify medical exam */
    modifyMedicalInfo: {
      name: "ModifyMedicalInfo",
      requestType: MedicalInfo,
      requestStream: false,
      responseType: ModifyMedicalInfoResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface EmployeeServicesServiceImplementation<CallContextExt = {}> {
  /** Get Doctor data */
  getDoctor(
    request: Empty,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Doctor>>;
  /** Get all Doctors */
  getAllDoctors(
    request: Empty,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetAllDoctorsResponse>>;
  /** Get Staff data */
  getStaff(
    request: Empty,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Staff>>;
  /** Get all Staff */
  getAllStaffs(
    request: Empty,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetAllStaffsResponse>>;
  /** Get Patient data */
  getPatient(
    request: Empty,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Patient>>;
  /** Get all Patient */
  getAllPatients(
    request: Empty,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetAllPatientsResponse>>;
  /** Get a list of appointments */
  getAppointments(
    request: GetAppointmentsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetAppointmentsResponse>>;
  /** Get a list of appointments */
  getAppointmentsFromDoctor(
    request: GetAppointmentsFromDoctorRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetAppointmentsFromDoctorResponse>>;
  /** Get details for a specific appointment */
  getAppointmentDetails(
    request: Appointment,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetAppointmentDetailsResponse>>;
  /** Retrieve the list of all medical exams without the medical report */
  getAllMedicalExam(
    request: GetAllMedicalExamRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetAllMedicalExamResponse>>;
  /** Get details for a specific medical exam */
  getMedicalExamDetails(
    request: MedicalExam,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetMedicalExamDetailsResponse>>;
  /** Retrieve the list of all medical exams without the medical report */
  getAllMedicalEvent(
    request: GetAllMedicalEventRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetAllMedicalEventResponse>>;
  /** Get details for a specific medical exam */
  getMedicalEventDetails(
    request: MedicalEvent,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetMedicalEventDetailsResponse>>;
  /** Get all ward */
  getAllWard(
    request: Empty,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<GetAllWardResponse>>;
  /** Create a medical exam */
  createMedicalExam(
    request: MedicalExam,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateMedicalExamResponse>>;
  /** Create a medical event */
  createMedicalEvent(
    request: MedicalEvent,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateMedicalEventResponse>>;
  /** Create a medical info */
  createMedicalInfo(
    request: MedicalInfo,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateMedicalInfoResponse>>;
  /** Create an appointment */
  createAppointment(
    request: Appointment,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateAppointmentResponse>>;
  /** Create a patient */
  createPatient(
    request: Patient,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreatePatientResponse>>;
  /** Create a patient */
  createDoctor(
    request: Doctor,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateDoctorResponse>>;
  /** Create a staff */
  createStaff(
    request: Staff,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateStaffResponse>>;
  /** Create a patient */
  createWard(
    request: Ward,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<CreateWardResponse>>;
  /** Modify a specific appointment */
  modifyAppointment(
    request: Appointment,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ModifyAppointmentResponse>>;
  /** Modify a patient */
  modifyPatient(
    request: Patient,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ModifyPatientResponse>>;
  /** Modify a doctor */
  modifyDoctor(
    request: Doctor,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ModifyDoctorResponse>>;
  /** Modify a staff */
  modifyStaff(
    request: Staff,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ModifyStaffResponse>>;
  /** Modify a medical event */
  modifyMedicalEvent(
    request: MedicalEvent,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ModifyMedicalEventResponse>>;
  /** Modify medical exam */
  modifyMedicalExam(
    request: MedicalExam,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ModifyMedicalExamResponse>>;
  /** Modify medical exam */
  modifyMedicalInfo(
    request: MedicalInfo,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ModifyMedicalInfoResponse>>;
}

export interface EmployeeServicesClient<CallOptionsExt = {}> {
  /** Get Doctor data */
  getDoctor(
    request: DeepPartial<Empty>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Doctor>;
  /** Get all Doctors */
  getAllDoctors(
    request: DeepPartial<Empty>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetAllDoctorsResponse>;
  /** Get Staff data */
  getStaff(
    request: DeepPartial<Empty>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Staff>;
  /** Get all Staff */
  getAllStaffs(
    request: DeepPartial<Empty>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetAllStaffsResponse>;
  /** Get Patient data */
  getPatient(
    request: DeepPartial<Empty>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Patient>;
  /** Get all Patient */
  getAllPatients(
    request: DeepPartial<Empty>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetAllPatientsResponse>;
  /** Get a list of appointments */
  getAppointments(
    request: DeepPartial<GetAppointmentsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetAppointmentsResponse>;
  /** Get a list of appointments */
  getAppointmentsFromDoctor(
    request: DeepPartial<GetAppointmentsFromDoctorRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetAppointmentsFromDoctorResponse>;
  /** Get details for a specific appointment */
  getAppointmentDetails(
    request: DeepPartial<Appointment>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetAppointmentDetailsResponse>;
  /** Retrieve the list of all medical exams without the medical report */
  getAllMedicalExam(
    request: DeepPartial<GetAllMedicalExamRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetAllMedicalExamResponse>;
  /** Get details for a specific medical exam */
  getMedicalExamDetails(
    request: DeepPartial<MedicalExam>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetMedicalExamDetailsResponse>;
  /** Retrieve the list of all medical exams without the medical report */
  getAllMedicalEvent(
    request: DeepPartial<GetAllMedicalEventRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetAllMedicalEventResponse>;
  /** Get details for a specific medical exam */
  getMedicalEventDetails(
    request: DeepPartial<MedicalEvent>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetMedicalEventDetailsResponse>;
  /** Get all ward */
  getAllWard(
    request: DeepPartial<Empty>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<GetAllWardResponse>;
  /** Create a medical exam */
  createMedicalExam(
    request: DeepPartial<MedicalExam>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateMedicalExamResponse>;
  /** Create a medical event */
  createMedicalEvent(
    request: DeepPartial<MedicalEvent>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateMedicalEventResponse>;
  /** Create a medical info */
  createMedicalInfo(
    request: DeepPartial<MedicalInfo>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateMedicalInfoResponse>;
  /** Create an appointment */
  createAppointment(
    request: DeepPartial<Appointment>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateAppointmentResponse>;
  /** Create a patient */
  createPatient(
    request: DeepPartial<Patient>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreatePatientResponse>;
  /** Create a patient */
  createDoctor(
    request: DeepPartial<Doctor>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateDoctorResponse>;
  /** Create a staff */
  createStaff(
    request: DeepPartial<Staff>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateStaffResponse>;
  /** Create a patient */
  createWard(
    request: DeepPartial<Ward>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<CreateWardResponse>;
  /** Modify a specific appointment */
  modifyAppointment(
    request: DeepPartial<Appointment>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ModifyAppointmentResponse>;
  /** Modify a patient */
  modifyPatient(
    request: DeepPartial<Patient>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ModifyPatientResponse>;
  /** Modify a doctor */
  modifyDoctor(
    request: DeepPartial<Doctor>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ModifyDoctorResponse>;
  /** Modify a staff */
  modifyStaff(
    request: DeepPartial<Staff>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ModifyStaffResponse>;
  /** Modify a medical event */
  modifyMedicalEvent(
    request: DeepPartial<MedicalEvent>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ModifyMedicalEventResponse>;
  /** Modify medical exam */
  modifyMedicalExam(
    request: DeepPartial<MedicalExam>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ModifyMedicalExamResponse>;
  /** Modify medical exam */
  modifyMedicalInfo(
    request: DeepPartial<MedicalInfo>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ModifyMedicalInfoResponse>;
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
