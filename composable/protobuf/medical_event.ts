// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.1
// source: medical_event.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "./google/protobuf/timestamp";
import { Patient } from "./user";
import { Ward } from "./ward";

export const protobufPackage = "com.git_commit_therapy.proto";

export enum SeverityCode {
  WHITE = 0,
  GREEN = 1,
  YELLOW = 2,
  ORANGE = 3,
  RED = 4,
  UNRECOGNIZED = -1,
}

export interface MedicalEvent {
  eventId: number;
  fromDateTime: Date | undefined;
  toDateTime: Date | undefined;
  severityCode: SeverityCode;
  dischargeLetter: string;
  patient: Patient | undefined;
  ward: Ward | undefined;
  medicalExamIds: number[];
}

function createBaseMedicalEvent(): MedicalEvent {
  return {
    eventId: 0,
    fromDateTime: undefined,
    toDateTime: undefined,
    severityCode: 0,
    dischargeLetter: "",
    patient: undefined,
    ward: undefined,
    medicalExamIds: [],
  };
}

export const MedicalEvent: MessageFns<MedicalEvent> = {
  encode(
    message: MedicalEvent,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.eventId !== 0) {
      writer.uint32(8).int32(message.eventId);
    }
    if (message.fromDateTime !== undefined) {
      Timestamp.encode(
        toTimestamp(message.fromDateTime),
        writer.uint32(18).fork(),
      ).join();
    }
    if (message.toDateTime !== undefined) {
      Timestamp.encode(
        toTimestamp(message.toDateTime),
        writer.uint32(26).fork(),
      ).join();
    }
    if (message.severityCode !== 0) {
      writer.uint32(32).int32(message.severityCode);
    }
    if (message.dischargeLetter !== "") {
      writer.uint32(42).string(message.dischargeLetter);
    }
    if (message.patient !== undefined) {
      Patient.encode(message.patient, writer.uint32(50).fork()).join();
    }
    if (message.ward !== undefined) {
      Ward.encode(message.ward, writer.uint32(58).fork()).join();
    }
    writer.uint32(66).fork();
    for (const v of message.medicalExamIds) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MedicalEvent {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMedicalEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.eventId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fromDateTime = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.toDateTime = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.severityCode = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.dischargeLetter = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.patient = Patient.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.ward = Ward.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag === 64) {
            message.medicalExamIds.push(reader.int32());

            continue;
          }

          if (tag === 66) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.medicalExamIds.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<MedicalEvent>): MedicalEvent {
    return MedicalEvent.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MedicalEvent>): MedicalEvent {
    const message = createBaseMedicalEvent();
    message.eventId = object.eventId ?? 0;
    message.fromDateTime = object.fromDateTime ?? undefined;
    message.toDateTime = object.toDateTime ?? undefined;
    message.severityCode = object.severityCode ?? 0;
    message.dischargeLetter = object.dischargeLetter ?? "";
    message.patient =
      object.patient !== undefined && object.patient !== null
        ? Patient.fromPartial(object.patient)
        : undefined;
    message.ward =
      object.ward !== undefined && object.ward !== null
        ? Ward.fromPartial(object.ward)
        : undefined;
    message.medicalExamIds = object.medicalExamIds?.map((e) => e) || [];
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
