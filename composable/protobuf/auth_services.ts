// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v3.19.1
// source: auth_services.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { type CallContext, type CallOptions } from "nice-grpc-common";
import { Timestamp } from "./google/protobuf/timestamp";

export const protobufPackage = "com.git_commit_therapy.proto";

export enum AuthStatus {
  FAIL = 0,
  SUCCESS = 1,
  UNRECOGNIZED = -1,
}

export interface LoginRequest {
  fiscalCode: string;
  password: string;
}

export interface LoginResponse {
  loginStatus: AuthStatus;
  loginMessage: string;
  accessToken: string;
  refreshToken: string;
}

export interface SignUpRequest {
  fiscalCode: string;
  name: string;
  surname: string;
  dateOfBirth: Date | undefined;
  phoneNumber: string;
  email: string;
  password: string;
}

export interface SignUpResponse {
  signUpStatus: AuthStatus;
  signUpMessage: string;
}

export interface RefreshTokenRequest {
  refreshToken: string;
}

export interface RefreshTokenResponse {
  refreshStatus: AuthStatus;
  refreshTokenMessage: string;
  accessToken: string;
  refreshToken: string;
}

function createBaseLoginRequest(): LoginRequest {
  return { fiscalCode: "", password: "" };
}

export const LoginRequest: MessageFns<LoginRequest> = {
  encode(
    message: LoginRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.fiscalCode !== "") {
      writer.uint32(10).string(message.fiscalCode);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fiscalCode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<LoginRequest>): LoginRequest {
    return LoginRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LoginRequest>): LoginRequest {
    const message = createBaseLoginRequest();
    message.fiscalCode = object.fiscalCode ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseLoginResponse(): LoginResponse {
  return {
    loginStatus: 0,
    loginMessage: "",
    accessToken: "",
    refreshToken: "",
  };
}

export const LoginResponse: MessageFns<LoginResponse> = {
  encode(
    message: LoginResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.loginStatus !== 0) {
      writer.uint32(8).int32(message.loginStatus);
    }
    if (message.loginMessage !== "") {
      writer.uint32(18).string(message.loginMessage);
    }
    if (message.accessToken !== "") {
      writer.uint32(26).string(message.accessToken);
    }
    if (message.refreshToken !== "") {
      writer.uint32(34).string(message.refreshToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.loginStatus = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.loginMessage = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<LoginResponse>): LoginResponse {
    return LoginResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LoginResponse>): LoginResponse {
    const message = createBaseLoginResponse();
    message.loginStatus = object.loginStatus ?? 0;
    message.loginMessage = object.loginMessage ?? "";
    message.accessToken = object.accessToken ?? "";
    message.refreshToken = object.refreshToken ?? "";
    return message;
  },
};

function createBaseSignUpRequest(): SignUpRequest {
  return {
    fiscalCode: "",
    name: "",
    surname: "",
    dateOfBirth: undefined,
    phoneNumber: "",
    email: "",
    password: "",
  };
}

export const SignUpRequest: MessageFns<SignUpRequest> = {
  encode(
    message: SignUpRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.fiscalCode !== "") {
      writer.uint32(10).string(message.fiscalCode);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.surname !== "") {
      writer.uint32(26).string(message.surname);
    }
    if (message.dateOfBirth !== undefined) {
      Timestamp.encode(
        toTimestamp(message.dateOfBirth),
        writer.uint32(34).fork(),
      ).join();
    }
    if (message.phoneNumber !== "") {
      writer.uint32(42).string(message.phoneNumber);
    }
    if (message.email !== "") {
      writer.uint32(50).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(58).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignUpRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignUpRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.fiscalCode = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.surname = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.dateOfBirth = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SignUpRequest>): SignUpRequest {
    return SignUpRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SignUpRequest>): SignUpRequest {
    const message = createBaseSignUpRequest();
    message.fiscalCode = object.fiscalCode ?? "";
    message.name = object.name ?? "";
    message.surname = object.surname ?? "";
    message.dateOfBirth = object.dateOfBirth ?? undefined;
    message.phoneNumber = object.phoneNumber ?? "";
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseSignUpResponse(): SignUpResponse {
  return { signUpStatus: 0, signUpMessage: "" };
}

export const SignUpResponse: MessageFns<SignUpResponse> = {
  encode(
    message: SignUpResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.signUpStatus !== 0) {
      writer.uint32(8).int32(message.signUpStatus);
    }
    if (message.signUpMessage !== "") {
      writer.uint32(18).string(message.signUpMessage);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignUpResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignUpResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.signUpStatus = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signUpMessage = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SignUpResponse>): SignUpResponse {
    return SignUpResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SignUpResponse>): SignUpResponse {
    const message = createBaseSignUpResponse();
    message.signUpStatus = object.signUpStatus ?? 0;
    message.signUpMessage = object.signUpMessage ?? "";
    return message;
  },
};

function createBaseRefreshTokenRequest(): RefreshTokenRequest {
  return { refreshToken: "" };
}

export const RefreshTokenRequest: MessageFns<RefreshTokenRequest> = {
  encode(
    message: RefreshTokenRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.refreshToken !== "") {
      writer.uint32(10).string(message.refreshToken);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): RefreshTokenRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRefreshTokenRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RefreshTokenRequest>): RefreshTokenRequest {
    return RefreshTokenRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RefreshTokenRequest>): RefreshTokenRequest {
    const message = createBaseRefreshTokenRequest();
    message.refreshToken = object.refreshToken ?? "";
    return message;
  },
};

function createBaseRefreshTokenResponse(): RefreshTokenResponse {
  return {
    refreshStatus: 0,
    refreshTokenMessage: "",
    accessToken: "",
    refreshToken: "",
  };
}

export const RefreshTokenResponse: MessageFns<RefreshTokenResponse> = {
  encode(
    message: RefreshTokenResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.refreshStatus !== 0) {
      writer.uint32(8).int32(message.refreshStatus);
    }
    if (message.refreshTokenMessage !== "") {
      writer.uint32(18).string(message.refreshTokenMessage);
    }
    if (message.accessToken !== "") {
      writer.uint32(26).string(message.accessToken);
    }
    if (message.refreshToken !== "") {
      writer.uint32(34).string(message.refreshToken);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): RefreshTokenResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRefreshTokenResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.refreshStatus = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.refreshTokenMessage = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<RefreshTokenResponse>): RefreshTokenResponse {
    return RefreshTokenResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RefreshTokenResponse>): RefreshTokenResponse {
    const message = createBaseRefreshTokenResponse();
    message.refreshStatus = object.refreshStatus ?? 0;
    message.refreshTokenMessage = object.refreshTokenMessage ?? "";
    message.accessToken = object.accessToken ?? "";
    message.refreshToken = object.refreshToken ?? "";
    return message;
  },
};

export type AuthServicesDefinition = typeof AuthServicesDefinition;
export const AuthServicesDefinition = {
  name: "AuthServices",
  fullName: "com.git_commit_therapy.proto.AuthServices",
  methods: {
    login: {
      name: "Login",
      requestType: LoginRequest,
      requestStream: false,
      responseType: LoginResponse,
      responseStream: false,
      options: {},
    },
    signUp: {
      name: "SignUp",
      requestType: SignUpRequest,
      requestStream: false,
      responseType: SignUpResponse,
      responseStream: false,
      options: {},
    },
    refreshToken: {
      name: "RefreshToken",
      requestType: RefreshTokenRequest,
      requestStream: false,
      responseType: RefreshTokenResponse,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface AuthServicesServiceImplementation<CallContextExt = {}> {
  login(
    request: LoginRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<LoginResponse>>;
  signUp(
    request: SignUpRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<SignUpResponse>>;
  refreshToken(
    request: RefreshTokenRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<RefreshTokenResponse>>;
}

export interface AuthServicesClient<CallOptionsExt = {}> {
  login(
    request: DeepPartial<LoginRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<LoginResponse>;
  signUp(
    request: DeepPartial<SignUpRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<SignUpResponse>;
  refreshToken(
    request: DeepPartial<RefreshTokenRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<RefreshTokenResponse>;
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
